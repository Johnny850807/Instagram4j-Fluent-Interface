/*
 * Copyright 2019 johnny850807
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package tw.waterball.impls.instagram4j.pagination;

import tw.waterball.api.InstagramComment;
import tw.waterball.api.InstagramUser;
import tw.waterball.api.pagination.Page;
import tw.waterball.api.pagination.PagingIterator;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.stream.Collectors;

/**
 * @author - johnny850807@gmail.com (Waterball)
 */
public class InstagramCommenterPagingIterator extends PagingIterator<InstagramUser> {
    private InstagramCommentPagingIterator instagramCommentPagingIterator;

    /**
     * @param instagramCommentPagingIterator the commenter paging iterator will use the comment page
     *                                       generated by the comment paging iterator to generate commenter page
     */
    public InstagramCommenterPagingIterator(InstagramCommentPagingIterator instagramCommentPagingIterator) {
        this.instagramCommentPagingIterator = instagramCommentPagingIterator;
    }


    @Override
    protected boolean hasNextPage() {
        return instagramCommentPagingIterator.hasNextPage();
    }

    @Override
    protected Page<InstagramUser> getNextPage() {
        Page<InstagramComment> nextCommentPage = instagramCommentPagingIterator.getNextPage();

        return new Page<>(nextCommentPage.get().stream()
                .map(InstagramComment::getCommenter)
                .collect(Collectors.toList()));
    }

}
